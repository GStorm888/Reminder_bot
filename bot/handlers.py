from telebot import TeleBot, types
from bot.config import TOKEN
from db.db import Database
from essence import User, Reminder
import datetime


def register_handlers(bot:TeleBot):
    @bot.message_handler(commands=['test'])
    def handle_test(message):
        Database.create_table()
        all_users = Database.get_all_users()
        print(all_users)
        all_reminders = Database.get_all_reminder()
        print(all_reminders)


    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        message = call.message
        if call.data == "help":
            bot.delete_message(message.chat.id, message.message_id)
            handle_help(message)
            message = call.message

        if call.data == "monday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø–Ω
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(0)
        elif call.data == "tuesday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –≤—Ç
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤–æ –í—Ç–æ—Ä–Ω–∏–∫, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(1)
        elif call.data == "wednesday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å—Ä
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –°—Ä–µ–¥—É, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(2)
        elif call.data == "thursday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —á—Ç
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –ß–µ—Ç–≤–µ—Ä–≥, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(3)
        elif call.data == "friday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ç
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –ü—è—Ç–Ω–∏—Ü—É, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(4)
        elif call.data == "saturday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–±
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –°—É–±–±–æ—Ç—É, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(5)
        elif call.data == "sunday":  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –≤—Å
            bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –≤ –∫–∞–∫–∏–µ –µ—â–µ –¥–Ω–∏?""")
            processing_day(6)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, """–•–æ—Ä–æ—à–æ, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?""")
        bot.register_next_step_handler(message, processing_time_reminder)





    @bot.message_handler(commands=['start'])
    def handle_start(message):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler(message, register_user)

    def register_user(message):
        telegram_id = str(message.chat.id)
        user_name = message.text
        if Database.get_user_by_user_name(user_name) is not None and telegram_id != Database.get_user_by_user_name(user_name)[0].telegram_id:
            bot.send_message(message.chat.id, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ")
            bot.register_next_step_handler(message, handle_start)
            return
        if Database.get_user_by_user_name(user_name) is None:
            user = User(user_name, telegram_id)
            Database.add_user(user)
        markup = types.InlineKeyboardMarkup()
        help_bttn = types.InlineKeyboardButton(text="help", callback_data="help")
        markup.add(help_bttn)
        bot.send_message(message.chat.id, "–≥–æ—Ç–æ–≤–æ, –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã?", reply_markup=markup)




        
    def handle_help(message):
        bot.send_message(message.chat.id, "–≤–æ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏:")



    @bot.message_handler(commands=['add_reminder'])
    def add_reminder(message):
        markup = types.InlineKeyboardMarkup()

        monday = types.InlineKeyboardButton(text="üìÖüü¶–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="monday")
        tuesday = types.InlineKeyboardButton(text="üìÖüüß–í—Ç–æ—Ä–Ω–∏–∫", callback_data="tuesday")

        wednesday = types.InlineKeyboardButton(text="üìÖüü© –°—Ä–µ–¥–∞", callback_data="wednesday")
        thursday = types.InlineKeyboardButton(text="üìÖüü•–ß–µ—Ç–≤–µ—Ä–≥", callback_data="thursday")

        friday = types.InlineKeyboardButton(text="üìÖüü™–ü—è—Ç–Ω–∏—Ü–∞", callback_data="friday")
        saturday = types.InlineKeyboardButton(text="üìÖüü´–°—É–±–±–æ—Ç–∞", callback_data="saturday")

        sunday = types.InlineKeyboardButton(text="üìÖ‚¨õ–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="sunday")
        finish_reminder = types.InlineKeyboardButton(
        )

        markup.add(monday, tuesday)
        markup.add(wednesday, thursday)
        markup.add(friday, saturday)
        markup.add(sunday)

        bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=markup
        )

    def processing_day(day_int):
        
    processing_time_reminder